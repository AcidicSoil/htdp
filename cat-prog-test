(require 2htdp/batch-io)
(require 2htdp/universe)
(require 2htdp/image)
  
(define cat-pic1 . )

(define cat-pic2 .)

(define WIDTH  300)
(define HEIGHT 100)
(define RESTART-POINT (+ WIDTH (image-width cat-pic1)))
(define BACKGROUND (empty-scene WIDTH HEIGHT))
(define cat-pic1-CENTER-TO-TOP
  (- HEIGHT (/ (image-height cat-pic1) 2)))

(define Y-cat-pic1 cat-pic1-CENTER-TO-TOP)

(define cat-pic1-CENTER-TO-WIDTH
  (/ (image-width cat-pic1) 2))

(define cat-pic1-R-S
  (- (image-width cat-pic1) cat-pic1-CENTER-TO-WIDTH))

(define-struct vel [deltax deltay])
; A Vel is a structure: 
;   (make-vel Number Number)
; interpretation (make-vel dx dy) means a velocity of 
; dx pixels [per tick] along the horizontal and
; dy pixels [per tick] along the vertical direction

(define-struct vcat (posn h))
; A VCat is a structure:
;    (make-VCat Posn Happiness)
; interpretation (make-VCat p h) describes a VCat
; whose image is placed on a x-coordinate p and with
; an image shown as a gauge that decreases with a
; number represented with h until an ke "up" is pressed
; and then that number is increased instead.

(define-struct h (percentage))

(define cat1  (make-vcat (make-posn 0 0) (make-h 100)))



; Posn Vel -> Posn
; adds v to p
(define (posn+ p v) p)

; cat-prog : number -> WorldState
; Cat-prog takes in a number and
; produces an image at the number.
(define (cat-prog start-posn)
  (big-bang start-posn
    [on-tick tock]
    [to-draw render]))

(define (tock x)
  (+ x 3))

; render : number -> Image
; Takes in a number and places a cat image
; at the x coordinate. 

(define (render x)
  (cond
    [(<  x  RESTART-POINT)
    (cond
      [(odd?  x)  (place-image cat-pic2 (tock x) Y-cat-pic1 BACKGROUND)]
      [else (place-image cat-pic1 (tock x) Y-cat-pic1 BACKGROUND)])]
    [(>=  x RESTART-POINT)
     (cond
       [(odd? x) (place-image cat-pic2 (modulo x RESTART-POINT) Y-cat-pic1 BACKGROUND)]
       [else (place-image cat-pic1 (modulo x RESTART-POINT) Y-cat-pic1 BACKGROUND)])]))


(define (add-sub-bar h key)
  ; h number
  ; key whatever (ignore)
  (cond
    [(key=? key "up")
     (+ h (* h (/ 1 3)))]
    [(key=? key "down")
     (- h (* h (/ 1 5)))]))

(define (gauge-decrease h)
  (- h 0.1))

; gauge-prog: Number -> Image
; returns a image based on number
; gauge-prog-template: Number -> Image
(define (progress-bar progress-bar-percentage)
  ; bar-width number
  ; bar-height number
  ; progress-bar-percentage number
  ; bar-color string
  (overlay/align "left" "middle"
                 (rectangle  progress-bar-percentage 20 "solid" "blue")
                 (rectangle 100 20 "outline" "blue")))

(define (happy-main h)
  (big-bang h
    (on-draw  progress-bar)
    (on-tick gauge-decrease)
    (on-key add-sub-bar)))
